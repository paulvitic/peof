version: 2.1

aliases:
  peof_primary_image: &peof_primary_image
    image: paulvitic/peof-circleci:20190907100225
  peof_primary_nodejs_image: &peof_primary_nodejs_image
    image: paulvitic/peof-circleci-nodejs:20190828123637
  peof_primary_go_image: &peof_primary_go_image
    image: paulvitic/peof-circleci-go:20190828123805
  workspace_root: &workspace_root /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  code_analysis_nodejs:
    description: "Static code analysis on Nodejs app"
    parameters:
      source_root:
        description: "Which sub folder is being built."
        type: string
    docker:
      - *peof_primary_nodejs_image
    steps:
      - checkout
      - run:
          name: Static code analysis with Eslint
          command: |
            cd ~/project/<< parameters.source_root >>
            npm install
            eslint ./src --format junit --output-file ~/project/<< parameters.source_root >>/reports/eslint.xml
      - store_test_results:
          path: ~/project/<< parameters.source_root >>/reports
      - store_artifacts:
          path: ~/project/<< parameters.source_root >>/reports

  unit_test_nodejs:
    description: "Unit test on Nodejs app"
    parameters:
      source_root:
        description: "Which sub folder is being built."
        type: string
    docker:
      - *peof_primary_nodejs_image
    steps:
      - checkout
      - run:
          name: "JavaScript Test Suite"
          # yarn here makes sure we are using the local jest binary
          command: yarn jest -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  push_container_to_test_repo:
    description: "push the container built from the development branch to test repository."
    parameters:
      source_root:
        description: "Which sub folder is being built."
        type: string
    docker:
      - *peof_primary_image
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "build docker image from feature branch"
          command: |
            TAG="$(date +'%Y%m%d')"-"$(git rev-parse --short HEAD)"
            echo $TAG
            cd ~/project/<< parameters.source_root >>
            source <(aws ecr get-login --region eu-central-1 --no-include-email)
            docker build -t 332197038802.dkr.ecr.eu-central-1.amazonaws.com/test-repository:${TAG} .
            docker push 332197038802.dkr.ecr.eu-central-1.amazonaws.com/test-repository:${TAG}

  deploy_to_development:
    description: "Deploy to Heroku test environment"
    parameters:
      source_root:
        description: "Which sub folder is being built."
        type: string
      heroku_app:
        description: "Where to deploy"
        type: string
      extra_git_push_args:
        description: "More git push flags (e.g. -f)"
        default: ""
        type: string
    docker:
      - *peof_primary_image
    steps:
      - checkout
      - run:
          name: Deploy branch to Heroku testing environment
          command: |
            git subtree push --prefix << parameters.source_root >> \
              https://heroku:$HEROKU_API_KEY@git.heroku.com/<< parameters.heroku_app >>.git master

  #integration_test_nodejs:

  #code_analysis_go:

  deploy_to_staging:
    description: "Deploy to Heroku staging environment"
    docker:
      - *peof_primary_image
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Deploy newly merged master to Heroku staging
          command: |
            github-merge-msg
            git subtree push --prefix $(</tmp/workspace/github_pr_source_root.txt) \
              https://heroku:$HEROKU_API_KEY@git.heroku.com/$(</tmp/workspace/github_pr_source_root.txt)-staging.git master
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - github_pr_source_root.txt

  deploy_to_production:
    description: "Deploy to Heroku production environment"
    docker:
      - *peof_primary_image
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Deploy newly merged master to Heroku production
          # add git subtree push to production Heroku app
          command: |
            echo `cat /tmp/workspace/github_pr_source_root.txt`

  integration_test_go:
    docker:
      - *peof_primary_go_image
      - image: circleci/mongo:4
        environment:
          ENV MONGO_INITDB_ROOT_USERNAME: root
          ENV MONGO_INITDB_ROOT_PASSWORD: password
          ENV MONGO_INITDB_DATABASE: admin
      - image: rabbitmq:3
        environment:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
          RABBITMQ_DEFAULT_VHOST: /
    steps:
      - checkout
      - run:
          name: Wait for RabbitMQ
          command: wait-for-container RabbitMQ localhost 5672 20
      - run:
          name: Wait for MongoDB
          command: wait-for-container MongoDB localhost 27017 20
      - run:
          name: Initialize MongoDB
          command: |
            mongo localhost:27017 < /home/circleci/mongo/mongo-init.js
      - run:
          name: Copy organization source into GOPATH src directory and pull all dependencies
          command: |
            cp -r /home/circleci/project/organization/src/organization.peof /go/src/organization.peof
            cd /go/src/organization.peof
            go get -v -t -d ./...
      - run:
          name: Execute tests
          environment:
            PROFILE: "ci"
          command: |
            go test -v ./...

workflows:
  version: 2
  build_organization:
    jobs:
      - deploy_to_development:
          context: peof
          source_root: organization
          heroku_app: organization-test
          filters:
            branches:
              only:
                - /organization\/.*/
  build_organization_ui:
    jobs:
      - code_analysis_nodejs:
          source_root: organization-ui
          filters:
            branches:
              only:
                - /organization-ui\/.*/
      - push_container_to_test_repo:
          context: peof
          source_root: organization-ui
          filters:
            branches:
              only:
                - /organization-ui\/.*/
          requires:
            - code_analysis_nodejs
      - deploy_to_development:
          context: peof # set on CircleCI. Hold secrets such as $HEROKU_API_KEY
          source_root: organization-ui
          heroku_app: organization-ui-test
          filters:
            branches:
              only:
                - /organization-ui\/.*/
          requires:
            - code_analysis_nodejs
  build_framework_ui:
    jobs:
      - code_analysis_nodejs:
          source_root: framework-ui
          filters:
            branches:
              only:
                - /framework-ui\/.*/
      - deploy_to_development:
          context: peof # set on CircleCI to hold secrets such as $HEROKU_API_KEY
          source_root: framework-ui
          heroku_app: framework-ui-test
          filters:
            branches:
              only:
                - /framework-ui\/.*/
          requires:
            - code_analysis_nodejs
  deploy:
    jobs:
      - deploy_to_staging:
          context: peof
          filters:
            branches:
              only:
                - master
      - request-testing:
          type: approval
          requires:
            - deploy_to_staging
      - deploy_to_production:
          context: peof
          filters:
            branches:
              only:
                - master
          requires:
            - request-testing