AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  repositoryName:
    Type: String
Resources:
  MyRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref repositoryName
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Only keep 8 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 8
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
  RepoUser:
    Type: AWS::IAM::User
  RepoUserGroup:
    Type: AWS::IAM::Group
  RepoUserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'RepoUserGroup'
      Users: [!Ref 'RepoUser']
  RepoPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECRAccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ['ecr:GetAuthorizationToken']
          Resource: '*'
        - Effect: Allow
          Action: ['ecr:GetDownloadUrlForLayer','ecr:BatchGetImage','ecr:BatchCheckLayerAvailability','ecr:PutImage','ecr:InitiateLayerUpload','ecr:UploadLayerPart','ecr:CompleteLayerUpload']
          Resource:
          - !Join ['', [!GetAtt MyRepository.Arn,'*']]
      Groups: [!Ref 'RepoUserGroup']
  RepoUserKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'RepoUser'

Outputs:
  Arn:
    Value: !GetAtt MyRepository.Arn
  AccessKey:
    Value: !Ref 'RepoUserKeys'
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [RepoUserKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user